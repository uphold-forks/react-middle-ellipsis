!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react")):"function"==typeof define&&define.amd?define(["React"],t):"object"==typeof exports?exports["react-middle-ellipsis"]=t(require("react")):e["react-middle-ellipsis"]=t(e.React)}(this,(function(e){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=1)}([function(t,r){t.exports=e},function(e,t,r){"use strict";r.r(t);var n=r(0),o=r.n(n);function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function u(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){c(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var l=function(e,t,r){var n=t.offsetWidth,o=e.offsetWidth,i=r.offsetWidth,u=n>i?n:i;if(u>o){var c=r.textContent,l=c.length,f=(l-(o-(u-i))/(i/l)+5)/2,a=Math.floor(l/2-f),s=Math.ceil(l/2+f);r.setAttribute("data-original",r.textContent),r.textContent=c.substr(0,a)+"..."+c.substr(s)}};t.default=function(e){var t=function(e){var t=e.parentNode,r=t.querySelector(".constrainedChild")||e.childNodes[0],n=t.querySelector(".ellipseMe")||t.querySelector(".constrainedEllipse")||r;null!==r&&null!==n&&(n.hasAttribute("data-original")&&(n.textContent=n.getAttribute("data-original")),l(e.offsetWidth>t.offsetWidth?t:e,r,n))},r=Object(n.useCallback)((function(e){if(null!==e)return window.addEventListener("resize",(function(){return t(e)})),t(e),function(){return window.removeEventListener("resize",(function(){return t(e)}))}}),[e.children]);return o.a.createElement("div",{ref:r,style:u({wordBreak:"keep-all",overflowWrap:"normal"},e.width&&{width:e.width})},e.children)}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFjdC1taWRkbGUtZWxsaXBzaXMvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL3JlYWN0LW1pZGRsZS1lbGxpcHNpcy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9yZWFjdC1taWRkbGUtZWxsaXBzaXMvZXh0ZXJuYWwge1wiY29tbW9uanNcIjpcInJlYWN0XCIsXCJjb21tb25qczJcIjpcInJlYWN0XCIsXCJhbWRcIjpcIlJlYWN0XCIsXCJyb290XCI6XCJSZWFjdFwifSIsIndlYnBhY2s6Ly9yZWFjdC1taWRkbGUtZWxsaXBzaXMvLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwicmVxdWlyZSIsImRlZmluZSIsImFtZCIsInRoaXMiLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18wX18iLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZWxsaXBzZSIsInBhcmVudE5vZGUiLCJjaGlsZE5vZGUiLCJ0eHROb2RlIiwiY2hpbGRXaWR0aCIsIm9mZnNldFdpZHRoIiwiY29udGFpbmVyV2lkdGgiLCJ0eHRXaWR0aCIsInRhcmdldFdpZHRoIiwic3RyIiwidGV4dENvbnRlbnQiLCJ0eHRDaGFycyIsImxlbmd0aCIsImRlbEVhY2hTaWRlIiwiZW5kTGVmdCIsIk1hdGgiLCJmbG9vciIsInN0YXJ0UmlnaHQiLCJjZWlsIiwic2V0QXR0cmlidXRlIiwic3Vic3RyIiwiQ29tcG9uZW50IiwicHJvcHMiLCJwcmVwRWxsaXBzZSIsIm5vZGUiLCJwYXJlbnQiLCJjaGlsZCIsInF1ZXJ5U2VsZWN0b3IiLCJjaGlsZE5vZGVzIiwidHh0VG9FbGxpcHNlIiwiaGFzQXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlIiwibWVhc3VyZWRQYXJlbnQiLCJ1c2VDYWxsYmFjayIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2hpbGRyZW4iLCJyZWYiLCJzdHlsZSIsIndvcmRCcmVhayIsIm92ZXJmbG93V3JhcCIsIndpZHRoIl0sIm1hcHBpbmdzIjoiQ0FBQSxTQUEyQ0EsRUFBTUMsR0FDMUIsaUJBQVpDLFNBQTBDLGlCQUFYQyxPQUN4Q0EsT0FBT0QsUUFBVUQsRUFBUUcsUUFBUSxVQUNSLG1CQUFYQyxRQUF5QkEsT0FBT0MsSUFDOUNELE9BQU8sQ0FBQyxTQUFVSixHQUNRLGlCQUFaQyxRQUNkQSxRQUFRLHlCQUEyQkQsRUFBUUcsUUFBUSxVQUVuREosRUFBSyx5QkFBMkJDLEVBQVFELEVBQVksT0FSdEQsQ0FTR08sTUFBTSxTQUFTQyxHQUNsQixPLFlDVEUsSUFBSUMsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVVQsUUFHbkMsSUFBSUMsRUFBU00sRUFBaUJFLEdBQVksQ0FDekNDLEVBQUdELEVBQ0hFLEdBQUcsRUFDSFgsUUFBUyxJQVVWLE9BTkFZLEVBQVFILEdBQVVJLEtBQUtaLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNRLEdBRy9EUCxFQUFPVSxHQUFJLEVBR0pWLEVBQU9ELFFBMERmLE9BckRBUSxFQUFvQk0sRUFBSUYsRUFHeEJKLEVBQW9CTyxFQUFJUixFQUd4QkMsRUFBb0JRLEVBQUksU0FBU2hCLEVBQVNpQixFQUFN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RSx5QkFDRUMsSUFBS04sRUFDTE8sTUFBSyxHQUNIQyxVQUFXLFdBQ1hDLGFBQWMsVUFDVm5CLEVBQU1vQixPQUFTLENBQUVBLE1BQU9wQixFQUFNb0IsU0FHbkNwQixFQUFNZSIsImZpbGUiOiJpbmRleC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXCJSZWFjdFwiXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJyZWFjdC1taWRkbGUtZWxsaXBzaXNcIl0gPSBmYWN0b3J5KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cdGVsc2Vcblx0XHRyb290W1wicmVhY3QtbWlkZGxlLWVsbGlwc2lzXCJdID0gZmFjdG9yeShyb290W1wiUmVhY3RcIl0pO1xufSkodGhpcywgZnVuY3Rpb24oX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMF9fKSB7XG5yZXR1cm4gIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18wX187IiwiLyogZXNsaW50LWRpc2FibGUgY29uc2lzdGVudC1yZXR1cm4gKi9cbmltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjayB9IGZyb20gXCJyZWFjdFwiO1xuXG5jb25zdCBDb21wb25lbnQgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHByZXBFbGxpcHNlID0gbm9kZSA9PiB7XG4gICAgICBjb25zdCBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICBjb25zdCBjaGlsZCA9XG4gICAgICAgIHBhcmVudC5xdWVyeVNlbGVjdG9yKFwiLmNvbnN0cmFpbmVkQ2hpbGRcIikgLyogTGVnYWN5LiAqLyB8fFxuICAgICAgICBub2RlLmNoaWxkTm9kZXNbMF07XG4gICAgICBjb25zdCB0eHRUb0VsbGlwc2UgPVxuICAgICAgICBwYXJlbnQucXVlcnlTZWxlY3RvcihcIi5lbGxpcHNlTWVcIikgfHxcbiAgICAgICAgcGFyZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY29uc3RyYWluZWRFbGxpcHNlXCIpIC8qIExlZ2FjeS4gKi8gfHxcbiAgICAgICAgY2hpbGQ7XG5cbiAgICAgIGlmIChjaGlsZCAhPT0gbnVsbCAmJiB0eHRUb0VsbGlwc2UgIT09IG51bGwpIHtcbiAgICAgICAgLy8gKFJlKS1zZXQgdGV4dCBiYWNrIHRvIGRhdGEtb3JpZ2luYWwtdGV4dCBpZiBpdCBleGlzdHMuXG4gICAgICAgIGlmICh0eHRUb0VsbGlwc2UuaGFzQXR0cmlidXRlKFwiZGF0YS1vcmlnaW5hbFwiKSkge1xuICAgICAgICAgIHR4dFRvRWxsaXBzZS50ZXh0Q29udGVudCA9IHR4dFRvRWxsaXBzZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLW9yaWdpbmFsXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxsaXBzZShcbiAgICAgICAgICAvLyBVc2UgdGhlIHNtYWxsZXIgd2lkdGguXG4gICAgICAgICAgbm9kZS5vZmZzZXRXaWR0aCA+IHBhcmVudC5vZmZzZXRXaWR0aCA/IHBhcmVudCA6IG5vZGUsXG4gICAgICAgICAgY2hpbGQsXG4gICAgICAgICAgdHh0VG9FbGxpcHNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgICBtZWFzdXJlZFBhcmVudCA9IHVzZUNhbGxiYWNrKG5vZGUgPT4ge1xuICAgICAgaWYgKG5vZGUgIT09IG51bGwpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgKCkgPT4gcHJlcEVsbGlwc2Uobm9kZSkpO1xuICAgICAgICBwcmVwRWxsaXBzZShub2RlKTtcblxuICAgICAgICByZXR1cm4gKCkgPT4gd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgKCkgPT4gcHJlcEVsbGlwc2Uobm9kZSkpO1xuICAgICAgfVxuICAgIH0sIFtwcm9wcy5jaGlsZHJlbl0pO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgcmVmPXttZWFzdXJlZFBhcmVudH1cbiAgICAgIHN0eWxlPXt7XG4gICAgICAgIHdvcmRCcmVhazogXCJrZWVwLWFsbFwiLFxuICAgICAgICBvdmVyZmxvd1dyYXA6IFwibm9ybWFsXCIsXG4gICAgICAgIC4uLihwcm9wcy53aWR0aCAmJiB7IHdpZHRoOiBwcm9wcy53aWR0aCB9KVxuICAgICAgfX1cbiAgICA+XG4gICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5jb25zdCBlbGxpcHNlID0gKHBhcmVudE5vZGUsIGNoaWxkTm9kZSwgdHh0Tm9kZSkgPT4ge1xuICBjb25zdCBjaGlsZFdpZHRoID0gY2hpbGROb2RlLm9mZnNldFdpZHRoO1xuICBjb25zdCBjb250YWluZXJXaWR0aCA9IHBhcmVudE5vZGUub2Zmc2V0V2lkdGg7XG4gIGNvbnN0IHR4dFdpZHRoID0gdHh0Tm9kZS5vZmZzZXRXaWR0aDtcbiAgY29uc3QgdGFyZ2V0V2lkdGggPSBjaGlsZFdpZHRoID4gdHh0V2lkdGggPyBjaGlsZFdpZHRoIDogdHh0V2lkdGg7XG5cbiAgaWYgKHRhcmdldFdpZHRoID4gY29udGFpbmVyV2lkdGgpIHtcbiAgICBjb25zdCBzdHIgPSB0eHROb2RlLnRleHRDb250ZW50O1xuICAgIGNvbnN0IHR4dENoYXJzID0gc3RyLmxlbmd0aDtcbiAgICBjb25zdCBhdmdMZXR0ZXJTaXplID0gdHh0V2lkdGggLyB0eHRDaGFycztcbiAgICBjb25zdCBjYW5GaXQgPSAoY29udGFpbmVyV2lkdGggLSAodGFyZ2V0V2lkdGggLSB0eHRXaWR0aCkpIC8gYXZnTGV0dGVyU2l6ZTtcbiAgICBjb25zdCBkZWxFYWNoU2lkZSA9ICh0eHRDaGFycyAtIGNhbkZpdCArIDUpIC8gMjtcbiAgICBjb25zdCBlbmRMZWZ0ID0gTWF0aC5mbG9vcih0eHRDaGFycyAvIDIgLSBkZWxFYWNoU2lkZSk7XG4gICAgY29uc3Qgc3RhcnRSaWdodCA9IE1hdGguY2VpbCh0eHRDaGFycyAvIDIgKyBkZWxFYWNoU2lkZSk7XG5cbiAgICB0eHROb2RlLnNldEF0dHJpYnV0ZShcImRhdGEtb3JpZ2luYWxcIiwgdHh0Tm9kZS50ZXh0Q29udGVudCk7XG4gICAgdHh0Tm9kZS50ZXh0Q29udGVudCA9XG4gICAgICBzdHIuc3Vic3RyKDAsIGVuZExlZnQpICsgXCIuLi5cIiArIHN0ci5zdWJzdHIoc3RhcnRSaWdodCk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudDtcbiJdLCJzb3VyY2VSb290IjoiIn0=